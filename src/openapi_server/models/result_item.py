# coding: utf-8

"""
    PDF Classifier API

    REST API to classify PDF files using a smart backend

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional

from openapi_server.models.qualified_value import QualifiedValue

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ResultItem(BaseModel):
    """
    ResultItem
    """ # noqa: E501
    kind: StrictStr = Field(description="The kind of PDF document, one of INVOICE, STATEMENT, LETTER, CONTRACT, COMMERCIALS")
    doc_id: QualifiedValue = Field(description="The document ID wrt to the document kind: - invoice-number for INVOICE - account-number for STATEMENT - letter-subject for LETTER - document-id for CONTRACT - \"none\" for COMMERCIALS ")
    doc_date_sic: Optional[QualifiedValue] = Field(default=None, description="The recognized date of the document, as-is")
    doc_date_parsed: Optional[datetime] = Field(default=None, description="The recognized date of the document, as date-time string")
    doc_subject: Optional[QualifiedValue] = Field(default=None, description="The recognized subject of the document")
    __properties: ClassVar[List[str]] = ["kind", "doc_id", "doc_date_sic", "doc_date_parsed", "doc_subject"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ResultItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of doc_id
        if self.doc_id:
            _dict['doc_id'] = self.doc_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of doc_date_sic
        if self.doc_date_sic:
            _dict['doc_date_sic'] = self.doc_date_sic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of doc_subject
        if self.doc_subject:
            _dict['doc_subject'] = self.doc_subject.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ResultItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kind": obj.get("kind"),
            "doc_id": QualifiedValue.from_dict(obj.get("doc_id")) if obj.get("doc_id") is not None else None,
            "doc_date_sic": QualifiedValue.from_dict(obj.get("doc_date_sic")) if obj.get("doc_date_sic") is not None else None,
            "doc_date_parsed": obj.get("doc_date_parsed"),
            "doc_subject": QualifiedValue.from_dict(obj.get("doc_subject")) if obj.get("doc_subject") is not None else None
        })
        return _obj


